// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package credit_card_approval.credit_card_fact_transform_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: credit_card_fact_transform Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20210915_1333-M12
 * @status
 */
public class credit_card_fact_transform implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "credit_card_fact_transform";
	private final String projectName = "CREDIT_CARD_APPROVAL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					credit_card_fact_transform.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(credit_card_fact_transform.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];

		public String CreditRecord_ID;

		public String getCreditRecord_ID() {
			return this.CreditRecord_ID;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public Long Time_ID;

		public Long getTime_ID() {
			return this.Time_ID;
		}

		public String Debt_TEST;

		public String getDebt_TEST() {
			return this.Debt_TEST;
		}

		public String GoodClient;

		public String getGoodClient() {
			return this.GoodClient;
		}

		public String BadClient;

		public String getBadClient() {
			return this.BadClient;
		}

		public java.util.Date Last_ETL;

		public java.util.Date getLast_ETL() {
			return this.Last_ETL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					this.CreditRecord_ID = readString(dis);

					this.Applicant_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Time_ID = null;
					} else {
						this.Time_ID = dis.readLong();
					}

					this.Debt_TEST = readString(dis);

					this.GoodClient = readString(dis);

					this.BadClient = readString(dis);

					this.Last_ETL = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CreditRecord_ID, dos);

				// String

				writeString(this.Applicant_ID, dos);

				// Long

				if (this.Time_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Time_ID);
				}

				// String

				writeString(this.Debt_TEST, dos);

				// String

				writeString(this.GoodClient, dos);

				// String

				writeString(this.BadClient, dos);

				// java.util.Date

				writeDate(this.Last_ETL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CreditRecord_ID=" + CreditRecord_ID);
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Time_ID=" + String.valueOf(Time_ID));
			sb.append(",Debt_TEST=" + Debt_TEST);
			sb.append(",GoodClient=" + GoodClient);
			sb.append(",BadClient=" + BadClient);
			sb.append(",Last_ETL=" + String.valueOf(Last_ETL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class replace_valueStruct implements routines.system.IPersistableRow<replace_valueStruct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];

		public Long Time_ID;

		public Long getTime_ID() {
			return this.Time_ID;
		}

		public Integer CreditRecord_ID;

		public Integer getCreditRecord_ID() {
			return this.CreditRecord_ID;
		}

		public java.util.Date Record_Date;

		public java.util.Date getRecord_Date() {
			return this.Record_Date;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public Integer Index_Applicant;

		public Integer getIndex_Applicant() {
			return this.Index_Applicant;
		}

		public String Applicant_Gender;

		public String getApplicant_Gender() {
			return this.Applicant_Gender;
		}

		public Integer Total_Children;

		public Integer getTotal_Children() {
			return this.Total_Children;
		}

		public Integer Total_Family_Members;

		public Integer getTotal_Family_Members() {
			return this.Total_Family_Members;
		}

		public Integer Applicant_Age;

		public Integer getApplicant_Age() {
			return this.Applicant_Age;
		}

		public java.util.Date Birth_Date;

		public java.util.Date getBirth_Date() {
			return this.Birth_Date;
		}

		public java.util.Date Employed_Date;

		public java.util.Date getEmployed_Date() {
			return this.Employed_Date;
		}

		public String Education_Type;

		public String getEducation_Type() {
			return this.Education_Type;
		}

		public String Family_Status;

		public String getFamily_Status() {
			return this.Family_Status;
		}

		public String Housing_Type;

		public String getHousing_Type() {
			return this.Housing_Type;
		}

		public String Income_Type;

		public String getIncome_Type() {
			return this.Income_Type;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Float Total_Income;

		public Float getTotal_Income() {
			return this.Total_Income;
		}

		public String Owned_Email;

		public String getOwned_Email() {
			return this.Owned_Email;
		}

		public String Owned_Mobile_Phone;

		public String getOwned_Mobile_Phone() {
			return this.Owned_Mobile_Phone;
		}

		public String Owned_Car;

		public String getOwned_Car() {
			return this.Owned_Car;
		}

		public String Owned_Realty;

		public String getOwned_Realty() {
			return this.Owned_Realty;
		}

		public String Owned_Phone;

		public String getOwned_Phone() {
			return this.Owned_Phone;
		}

		public String Owned_Work_Phone;

		public String getOwned_Work_Phone() {
			return this.Owned_Work_Phone;
		}

		public Integer Day;

		public Integer getDay() {
			return this.Day;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Time_ID = null;
					} else {
						this.Time_ID = dis.readLong();
					}

					this.CreditRecord_ID = readInteger(dis);

					this.Record_Date = readDate(dis);

					this.Applicant_ID = readString(dis);

					this.Status = readString(dis);

					this.Index_Applicant = readInteger(dis);

					this.Applicant_Gender = readString(dis);

					this.Total_Children = readInteger(dis);

					this.Total_Family_Members = readInteger(dis);

					this.Applicant_Age = readInteger(dis);

					this.Birth_Date = readDate(dis);

					this.Employed_Date = readDate(dis);

					this.Education_Type = readString(dis);

					this.Family_Status = readString(dis);

					this.Housing_Type = readString(dis);

					this.Income_Type = readString(dis);

					this.Job_Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Income = null;
					} else {
						this.Total_Income = dis.readFloat();
					}

					this.Owned_Email = readString(dis);

					this.Owned_Mobile_Phone = readString(dis);

					this.Owned_Car = readString(dis);

					this.Owned_Realty = readString(dis);

					this.Owned_Phone = readString(dis);

					this.Owned_Work_Phone = readString(dis);

					this.Day = readInteger(dis);

					this.Month = readInteger(dis);

					this.Year = readInteger(dis);

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Time_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Time_ID);
				}

				// Integer

				writeInteger(this.CreditRecord_ID, dos);

				// java.util.Date

				writeDate(this.Record_Date, dos);

				// String

				writeString(this.Applicant_ID, dos);

				// String

				writeString(this.Status, dos);

				// Integer

				writeInteger(this.Index_Applicant, dos);

				// String

				writeString(this.Applicant_Gender, dos);

				// Integer

				writeInteger(this.Total_Children, dos);

				// Integer

				writeInteger(this.Total_Family_Members, dos);

				// Integer

				writeInteger(this.Applicant_Age, dos);

				// java.util.Date

				writeDate(this.Birth_Date, dos);

				// java.util.Date

				writeDate(this.Employed_Date, dos);

				// String

				writeString(this.Education_Type, dos);

				// String

				writeString(this.Family_Status, dos);

				// String

				writeString(this.Housing_Type, dos);

				// String

				writeString(this.Income_Type, dos);

				// String

				writeString(this.Job_Title, dos);

				// Float

				if (this.Total_Income == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Income);
				}

				// String

				writeString(this.Owned_Email, dos);

				// String

				writeString(this.Owned_Mobile_Phone, dos);

				// String

				writeString(this.Owned_Car, dos);

				// String

				writeString(this.Owned_Realty, dos);

				// String

				writeString(this.Owned_Phone, dos);

				// String

				writeString(this.Owned_Work_Phone, dos);

				// Integer

				writeInteger(this.Day, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Time_ID=" + String.valueOf(Time_ID));
			sb.append(",CreditRecord_ID=" + String.valueOf(CreditRecord_ID));
			sb.append(",Record_Date=" + String.valueOf(Record_Date));
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Status=" + Status);
			sb.append(",Index_Applicant=" + String.valueOf(Index_Applicant));
			sb.append(",Applicant_Gender=" + Applicant_Gender);
			sb.append(",Total_Children=" + String.valueOf(Total_Children));
			sb.append(",Total_Family_Members=" + String.valueOf(Total_Family_Members));
			sb.append(",Applicant_Age=" + String.valueOf(Applicant_Age));
			sb.append(",Birth_Date=" + String.valueOf(Birth_Date));
			sb.append(",Employed_Date=" + String.valueOf(Employed_Date));
			sb.append(",Education_Type=" + Education_Type);
			sb.append(",Family_Status=" + Family_Status);
			sb.append(",Housing_Type=" + Housing_Type);
			sb.append(",Income_Type=" + Income_Type);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Total_Income=" + String.valueOf(Total_Income));
			sb.append(",Owned_Email=" + Owned_Email);
			sb.append(",Owned_Mobile_Phone=" + Owned_Mobile_Phone);
			sb.append(",Owned_Car=" + Owned_Car);
			sb.append(",Owned_Realty=" + Owned_Realty);
			sb.append(",Owned_Phone=" + Owned_Phone);
			sb.append(",Owned_Work_Phone=" + Owned_Work_Phone);
			sb.append(",Day=" + String.valueOf(Day));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(replace_valueStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];

		public Long Time_ID;

		public Long getTime_ID() {
			return this.Time_ID;
		}

		public Integer CreditRecord_ID;

		public Integer getCreditRecord_ID() {
			return this.CreditRecord_ID;
		}

		public java.util.Date Record_Date;

		public java.util.Date getRecord_Date() {
			return this.Record_Date;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public Integer Index_Applicant;

		public Integer getIndex_Applicant() {
			return this.Index_Applicant;
		}

		public String Applicant_Gender;

		public String getApplicant_Gender() {
			return this.Applicant_Gender;
		}

		public Integer Total_Children;

		public Integer getTotal_Children() {
			return this.Total_Children;
		}

		public Integer Total_Family_Members;

		public Integer getTotal_Family_Members() {
			return this.Total_Family_Members;
		}

		public Integer Applicant_Age;

		public Integer getApplicant_Age() {
			return this.Applicant_Age;
		}

		public java.util.Date Birth_Date;

		public java.util.Date getBirth_Date() {
			return this.Birth_Date;
		}

		public java.util.Date Employed_Date;

		public java.util.Date getEmployed_Date() {
			return this.Employed_Date;
		}

		public String Education_Type;

		public String getEducation_Type() {
			return this.Education_Type;
		}

		public String Family_Status;

		public String getFamily_Status() {
			return this.Family_Status;
		}

		public String Housing_Type;

		public String getHousing_Type() {
			return this.Housing_Type;
		}

		public String Income_Type;

		public String getIncome_Type() {
			return this.Income_Type;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Float Total_Income;

		public Float getTotal_Income() {
			return this.Total_Income;
		}

		public String Owned_Email;

		public String getOwned_Email() {
			return this.Owned_Email;
		}

		public String Owned_Mobile_Phone;

		public String getOwned_Mobile_Phone() {
			return this.Owned_Mobile_Phone;
		}

		public String Owned_Car;

		public String getOwned_Car() {
			return this.Owned_Car;
		}

		public String Owned_Realty;

		public String getOwned_Realty() {
			return this.Owned_Realty;
		}

		public String Owned_Phone;

		public String getOwned_Phone() {
			return this.Owned_Phone;
		}

		public String Owned_Work_Phone;

		public String getOwned_Work_Phone() {
			return this.Owned_Work_Phone;
		}

		public Integer Day;

		public Integer getDay() {
			return this.Day;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Time_ID = null;
					} else {
						this.Time_ID = dis.readLong();
					}

					this.CreditRecord_ID = readInteger(dis);

					this.Record_Date = readDate(dis);

					this.Applicant_ID = readString(dis);

					this.Status = readString(dis);

					this.Index_Applicant = readInteger(dis);

					this.Applicant_Gender = readString(dis);

					this.Total_Children = readInteger(dis);

					this.Total_Family_Members = readInteger(dis);

					this.Applicant_Age = readInteger(dis);

					this.Birth_Date = readDate(dis);

					this.Employed_Date = readDate(dis);

					this.Education_Type = readString(dis);

					this.Family_Status = readString(dis);

					this.Housing_Type = readString(dis);

					this.Income_Type = readString(dis);

					this.Job_Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Income = null;
					} else {
						this.Total_Income = dis.readFloat();
					}

					this.Owned_Email = readString(dis);

					this.Owned_Mobile_Phone = readString(dis);

					this.Owned_Car = readString(dis);

					this.Owned_Realty = readString(dis);

					this.Owned_Phone = readString(dis);

					this.Owned_Work_Phone = readString(dis);

					this.Day = readInteger(dis);

					this.Month = readInteger(dis);

					this.Year = readInteger(dis);

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Time_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Time_ID);
				}

				// Integer

				writeInteger(this.CreditRecord_ID, dos);

				// java.util.Date

				writeDate(this.Record_Date, dos);

				// String

				writeString(this.Applicant_ID, dos);

				// String

				writeString(this.Status, dos);

				// Integer

				writeInteger(this.Index_Applicant, dos);

				// String

				writeString(this.Applicant_Gender, dos);

				// Integer

				writeInteger(this.Total_Children, dos);

				// Integer

				writeInteger(this.Total_Family_Members, dos);

				// Integer

				writeInteger(this.Applicant_Age, dos);

				// java.util.Date

				writeDate(this.Birth_Date, dos);

				// java.util.Date

				writeDate(this.Employed_Date, dos);

				// String

				writeString(this.Education_Type, dos);

				// String

				writeString(this.Family_Status, dos);

				// String

				writeString(this.Housing_Type, dos);

				// String

				writeString(this.Income_Type, dos);

				// String

				writeString(this.Job_Title, dos);

				// Float

				if (this.Total_Income == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Income);
				}

				// String

				writeString(this.Owned_Email, dos);

				// String

				writeString(this.Owned_Mobile_Phone, dos);

				// String

				writeString(this.Owned_Car, dos);

				// String

				writeString(this.Owned_Realty, dos);

				// String

				writeString(this.Owned_Phone, dos);

				// String

				writeString(this.Owned_Work_Phone, dos);

				// Integer

				writeInteger(this.Day, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Time_ID=" + String.valueOf(Time_ID));
			sb.append(",CreditRecord_ID=" + String.valueOf(CreditRecord_ID));
			sb.append(",Record_Date=" + String.valueOf(Record_Date));
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Status=" + Status);
			sb.append(",Index_Applicant=" + String.valueOf(Index_Applicant));
			sb.append(",Applicant_Gender=" + Applicant_Gender);
			sb.append(",Total_Children=" + String.valueOf(Total_Children));
			sb.append(",Total_Family_Members=" + String.valueOf(Total_Family_Members));
			sb.append(",Applicant_Age=" + String.valueOf(Applicant_Age));
			sb.append(",Birth_Date=" + String.valueOf(Birth_Date));
			sb.append(",Employed_Date=" + String.valueOf(Employed_Date));
			sb.append(",Education_Type=" + Education_Type);
			sb.append(",Family_Status=" + Family_Status);
			sb.append(",Housing_Type=" + Housing_Type);
			sb.append(",Income_Type=" + Income_Type);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Total_Income=" + String.valueOf(Total_Income));
			sb.append(",Owned_Email=" + Owned_Email);
			sb.append(",Owned_Mobile_Phone=" + Owned_Mobile_Phone);
			sb.append(",Owned_Car=" + Owned_Car);
			sb.append(",Owned_Realty=" + Owned_Realty);
			sb.append(",Owned_Phone=" + Owned_Phone);
			sb.append(",Owned_Work_Phone=" + Owned_Work_Phone);
			sb.append(",Day=" + String.valueOf(Day));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filter_dataStruct implements routines.system.IPersistableRow<filter_dataStruct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];

		public Long Time_ID;

		public Long getTime_ID() {
			return this.Time_ID;
		}

		public Integer CreditRecord_ID;

		public Integer getCreditRecord_ID() {
			return this.CreditRecord_ID;
		}

		public java.util.Date Record_Date;

		public java.util.Date getRecord_Date() {
			return this.Record_Date;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public Integer Index_Applicant;

		public Integer getIndex_Applicant() {
			return this.Index_Applicant;
		}

		public String Applicant_Gender;

		public String getApplicant_Gender() {
			return this.Applicant_Gender;
		}

		public Integer Total_Children;

		public Integer getTotal_Children() {
			return this.Total_Children;
		}

		public Integer Total_Family_Members;

		public Integer getTotal_Family_Members() {
			return this.Total_Family_Members;
		}

		public Integer Applicant_Age;

		public Integer getApplicant_Age() {
			return this.Applicant_Age;
		}

		public java.util.Date Birth_Date;

		public java.util.Date getBirth_Date() {
			return this.Birth_Date;
		}

		public java.util.Date Employed_Date;

		public java.util.Date getEmployed_Date() {
			return this.Employed_Date;
		}

		public String Education_Type;

		public String getEducation_Type() {
			return this.Education_Type;
		}

		public String Family_Status;

		public String getFamily_Status() {
			return this.Family_Status;
		}

		public String Housing_Type;

		public String getHousing_Type() {
			return this.Housing_Type;
		}

		public String Income_Type;

		public String getIncome_Type() {
			return this.Income_Type;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Float Total_Income;

		public Float getTotal_Income() {
			return this.Total_Income;
		}

		public String Owned_Email;

		public String getOwned_Email() {
			return this.Owned_Email;
		}

		public String Owned_Mobile_Phone;

		public String getOwned_Mobile_Phone() {
			return this.Owned_Mobile_Phone;
		}

		public String Owned_Car;

		public String getOwned_Car() {
			return this.Owned_Car;
		}

		public String Owned_Realty;

		public String getOwned_Realty() {
			return this.Owned_Realty;
		}

		public String Owned_Phone;

		public String getOwned_Phone() {
			return this.Owned_Phone;
		}

		public String Owned_Work_Phone;

		public String getOwned_Work_Phone() {
			return this.Owned_Work_Phone;
		}

		public Integer Day;

		public Integer getDay() {
			return this.Day;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Time_ID = null;
					} else {
						this.Time_ID = dis.readLong();
					}

					this.CreditRecord_ID = readInteger(dis);

					this.Record_Date = readDate(dis);

					this.Applicant_ID = readString(dis);

					this.Status = readString(dis);

					this.Index_Applicant = readInteger(dis);

					this.Applicant_Gender = readString(dis);

					this.Total_Children = readInteger(dis);

					this.Total_Family_Members = readInteger(dis);

					this.Applicant_Age = readInteger(dis);

					this.Birth_Date = readDate(dis);

					this.Employed_Date = readDate(dis);

					this.Education_Type = readString(dis);

					this.Family_Status = readString(dis);

					this.Housing_Type = readString(dis);

					this.Income_Type = readString(dis);

					this.Job_Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Income = null;
					} else {
						this.Total_Income = dis.readFloat();
					}

					this.Owned_Email = readString(dis);

					this.Owned_Mobile_Phone = readString(dis);

					this.Owned_Car = readString(dis);

					this.Owned_Realty = readString(dis);

					this.Owned_Phone = readString(dis);

					this.Owned_Work_Phone = readString(dis);

					this.Day = readInteger(dis);

					this.Month = readInteger(dis);

					this.Year = readInteger(dis);

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Time_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Time_ID);
				}

				// Integer

				writeInteger(this.CreditRecord_ID, dos);

				// java.util.Date

				writeDate(this.Record_Date, dos);

				// String

				writeString(this.Applicant_ID, dos);

				// String

				writeString(this.Status, dos);

				// Integer

				writeInteger(this.Index_Applicant, dos);

				// String

				writeString(this.Applicant_Gender, dos);

				// Integer

				writeInteger(this.Total_Children, dos);

				// Integer

				writeInteger(this.Total_Family_Members, dos);

				// Integer

				writeInteger(this.Applicant_Age, dos);

				// java.util.Date

				writeDate(this.Birth_Date, dos);

				// java.util.Date

				writeDate(this.Employed_Date, dos);

				// String

				writeString(this.Education_Type, dos);

				// String

				writeString(this.Family_Status, dos);

				// String

				writeString(this.Housing_Type, dos);

				// String

				writeString(this.Income_Type, dos);

				// String

				writeString(this.Job_Title, dos);

				// Float

				if (this.Total_Income == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Income);
				}

				// String

				writeString(this.Owned_Email, dos);

				// String

				writeString(this.Owned_Mobile_Phone, dos);

				// String

				writeString(this.Owned_Car, dos);

				// String

				writeString(this.Owned_Realty, dos);

				// String

				writeString(this.Owned_Phone, dos);

				// String

				writeString(this.Owned_Work_Phone, dos);

				// Integer

				writeInteger(this.Day, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Time_ID=" + String.valueOf(Time_ID));
			sb.append(",CreditRecord_ID=" + String.valueOf(CreditRecord_ID));
			sb.append(",Record_Date=" + String.valueOf(Record_Date));
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Status=" + Status);
			sb.append(",Index_Applicant=" + String.valueOf(Index_Applicant));
			sb.append(",Applicant_Gender=" + Applicant_Gender);
			sb.append(",Total_Children=" + String.valueOf(Total_Children));
			sb.append(",Total_Family_Members=" + String.valueOf(Total_Family_Members));
			sb.append(",Applicant_Age=" + String.valueOf(Applicant_Age));
			sb.append(",Birth_Date=" + String.valueOf(Birth_Date));
			sb.append(",Employed_Date=" + String.valueOf(Employed_Date));
			sb.append(",Education_Type=" + Education_Type);
			sb.append(",Family_Status=" + Family_Status);
			sb.append(",Housing_Type=" + Housing_Type);
			sb.append(",Income_Type=" + Income_Type);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Total_Income=" + String.valueOf(Total_Income));
			sb.append(",Owned_Email=" + Owned_Email);
			sb.append(",Owned_Mobile_Phone=" + Owned_Mobile_Phone);
			sb.append(",Owned_Car=" + Owned_Car);
			sb.append(",Owned_Realty=" + Owned_Realty);
			sb.append(",Owned_Phone=" + Owned_Phone);
			sb.append(",Owned_Work_Phone=" + Owned_Work_Phone);
			sb.append(",Day=" + String.valueOf(Day));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filter_dataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];

		public Integer CreditRecord_ID;

		public Integer getCreditRecord_ID() {
			return this.CreditRecord_ID;
		}

		public java.util.Date Record_Date;

		public java.util.Date getRecord_Date() {
			return this.Record_Date;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					this.CreditRecord_ID = readInteger(dis);

					this.Record_Date = readDate(dis);

					this.Applicant_ID = readString(dis);

					this.Status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CreditRecord_ID, dos);

				// java.util.Date

				writeDate(this.Record_Date, dos);

				// String

				writeString(this.Applicant_ID, dos);

				// String

				writeString(this.Status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CreditRecord_ID=" + String.valueOf(CreditRecord_ID));
			sb.append(",Record_Date=" + String.valueOf(Record_Date));
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Status=" + Status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];

		public Integer CreditRecord_ID;

		public Integer getCreditRecord_ID() {
			return this.CreditRecord_ID;
		}

		public java.util.Date Record_Date;

		public java.util.Date getRecord_Date() {
			return this.Record_Date;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					this.CreditRecord_ID = readInteger(dis);

					this.Record_Date = readDate(dis);

					this.Applicant_ID = readString(dis);

					this.Status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CreditRecord_ID, dos);

				// java.util.Date

				writeDate(this.Record_Date, dos);

				// String

				writeString(this.Applicant_ID, dos);

				// String

				writeString(this.Status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CreditRecord_ID=" + String.valueOf(CreditRecord_ID));
			sb.append(",Record_Date=" + String.valueOf(Record_Date));
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Status=" + Status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				filter_dataStruct filter_data = new filter_dataStruct();
				row4Struct row4 = new row4Struct();
				replace_valueStruct replace_value = new replace_valueStruct();
				outStruct out = new outStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "creditcard_fact";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "credit_card_approval_dw"
							+ "?" + "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "credit_card_approval_dw"
							+ "?" + properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:yrhlds7YzCE2MdBKWtp/g9FmsyNMY4JeS2SiHA==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				String insert_tDBOutput_1 = "INSERT INTO `" + "creditcard_fact"
						+ "` (`CreditRecord_ID`,`Applicant_ID`,`Time_ID`,`Debt_TEST`,`GoodClient`,`BadClient`,`Last_ETL`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "replace_value");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				replace_valueStruct replace_value_tmp = new replace_valueStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "filter_data");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				filter_dataStruct filter_data_tmp = new filter_dataStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:fQty3cALBmiimgZXnMpirhciTprhh8EWZlG6/w==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "credit_card_approval_dw"
						+ "?" + "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `creditrecord_dimension`.`CreditRecord_ID`, \n  `creditrecord_dimension`.`Record_Date`, \n  `creditrecord_dimen"
						+ "sion`.`Applicant_ID`, \n  `creditrecord_dimension`.`Status`\nFROM `creditrecord_dimension`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.CreditRecord_ID = null;
						} else {

							row1.CreditRecord_ID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.CreditRecord_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Record_Date = null;
						} else {

							if (rs_tDBInput_1.getString(2) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.Record_Date = rs_tDBInput_1.getTimestamp(2);
								} else {
									row1.Record_Date = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.Record_Date = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Applicant_ID = null;
						} else {

							row1.Applicant_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Status = null;
						} else {

							row1.Status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.Applicant_ID = row1.Applicant_ID;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.Applicant_ID = '" +
							// row2HashKey.Applicant_ID + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row3"
						///////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.Date = row1.Record_Date == null ? null
									: new java.util.Date(row1.Record_Date.getTime());

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
							// and it contains more one result from keys : row3.Date = '" + row3HashKey.Date
							// + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							filter_data = null;

							if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'filter_data'
								filter_data_tmp.Time_ID = row3.Time_ID;
								filter_data_tmp.CreditRecord_ID = row1.CreditRecord_ID;
								filter_data_tmp.Record_Date = row1.Record_Date;
								filter_data_tmp.Applicant_ID = row2.Applicant_ID;
								filter_data_tmp.Status = row1.Status;
								filter_data_tmp.Index_Applicant = row2.Index_Applicant;
								filter_data_tmp.Applicant_Gender = row2.Applicant_Gender;
								filter_data_tmp.Total_Children = row2.Total_Children;
								filter_data_tmp.Total_Family_Members = row2.Total_Family_Members;
								filter_data_tmp.Applicant_Age = row2.Applicant_Age;
								filter_data_tmp.Birth_Date = row2.Birth_Date;
								filter_data_tmp.Employed_Date = row2.Employed_Date;
								filter_data_tmp.Education_Type = row2.Education_Type;
								filter_data_tmp.Family_Status = row2.Family_Status;
								filter_data_tmp.Housing_Type = row2.Housing_Type;
								filter_data_tmp.Income_Type = row2.Income_Type;
								filter_data_tmp.Job_Title = row2.Job_Title;
								filter_data_tmp.Total_Income = row2.Total_Income;
								filter_data_tmp.Owned_Email = row2.Owned_Email;
								filter_data_tmp.Owned_Mobile_Phone = row2.Owned_Mobile_Phone;
								filter_data_tmp.Owned_Car = row2.Owned_Car;
								filter_data_tmp.Owned_Realty = row2.Owned_Realty;
								filter_data_tmp.Owned_Phone = row2.Owned_Phone;
								filter_data_tmp.Owned_Work_Phone = row2.Owned_Work_Phone;
								filter_data_tmp.Day = row3.Day;
								filter_data_tmp.Month = row3.Month;
								filter_data_tmp.Year = row3.Year;
								filter_data_tmp.Date = row3.Date;
								filter_data = filter_data_tmp;
							} // closing inner join bracket (2)
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "filter_data"
						if (filter_data != null) {

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "filter_data"

								);
							}

							row4 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(filter_data.Applicant_ID == null ? false
											: filter_data.Applicant_ID.compareTo("") != 0),
									"Applicant_ID.compareTo(\"\") != 0 failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row4 == null) {
									row4 = new row4Struct();
								}
								row4.Time_ID = filter_data.Time_ID;
								row4.CreditRecord_ID = filter_data.CreditRecord_ID;
								row4.Record_Date = filter_data.Record_Date;
								row4.Applicant_ID = filter_data.Applicant_ID;
								row4.Status = filter_data.Status;
								row4.Index_Applicant = filter_data.Index_Applicant;
								row4.Applicant_Gender = filter_data.Applicant_Gender;
								row4.Total_Children = filter_data.Total_Children;
								row4.Total_Family_Members = filter_data.Total_Family_Members;
								row4.Applicant_Age = filter_data.Applicant_Age;
								row4.Birth_Date = filter_data.Birth_Date;
								row4.Employed_Date = filter_data.Employed_Date;
								row4.Education_Type = filter_data.Education_Type;
								row4.Family_Status = filter_data.Family_Status;
								row4.Housing_Type = filter_data.Housing_Type;
								row4.Income_Type = filter_data.Income_Type;
								row4.Job_Title = filter_data.Job_Title;
								row4.Total_Income = filter_data.Total_Income;
								row4.Owned_Email = filter_data.Owned_Email;
								row4.Owned_Mobile_Phone = filter_data.Owned_Mobile_Phone;
								row4.Owned_Car = filter_data.Owned_Car;
								row4.Owned_Realty = filter_data.Owned_Realty;
								row4.Owned_Phone = filter_data.Owned_Phone;
								row4.Owned_Work_Phone = filter_data.Owned_Work_Phone;
								row4.Day = filter_data.Day;
								row4.Month = filter_data.Month;
								row4.Year = filter_data.Year;
								row4.Date = filter_data.Date;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									replace_value = null;

// # Output table : 'replace_value'
									replace_value_tmp.Time_ID = row4.Time_ID;
									replace_value_tmp.CreditRecord_ID = row4.CreditRecord_ID;
									replace_value_tmp.Record_Date = row4.Record_Date;
									replace_value_tmp.Applicant_ID = row4.Applicant_ID;
									replace_value_tmp.Status = row4.Status.replace("C", "DadDebt")
											.replace("X", "GoodDebt").replace("0", "GoodDebt").replace("1", "DadDebt")
											.replace("2", "DadDebt").replace("3", "DadDebt").replace("4", "DadDebt")
											.replace("5", "DadDebt");
									replace_value_tmp.Index_Applicant = row4.Index_Applicant;
									replace_value_tmp.Applicant_Gender = row4.Applicant_Gender;
									replace_value_tmp.Total_Children = row4.Total_Children;
									replace_value_tmp.Total_Family_Members = row4.Total_Family_Members;
									replace_value_tmp.Applicant_Age = row4.Applicant_Age;
									replace_value_tmp.Birth_Date = row4.Birth_Date;
									replace_value_tmp.Employed_Date = row4.Employed_Date;
									replace_value_tmp.Education_Type = row4.Education_Type;
									replace_value_tmp.Family_Status = row4.Family_Status;
									replace_value_tmp.Housing_Type = row4.Housing_Type;
									replace_value_tmp.Income_Type = row4.Income_Type;
									replace_value_tmp.Job_Title = row4.Job_Title;
									replace_value_tmp.Total_Income = row4.Total_Income;
									replace_value_tmp.Owned_Email = row4.Owned_Email;
									replace_value_tmp.Owned_Mobile_Phone = row4.Owned_Mobile_Phone;
									replace_value_tmp.Owned_Car = row4.Owned_Car;
									replace_value_tmp.Owned_Realty = row4.Owned_Realty;
									replace_value_tmp.Owned_Phone = row4.Owned_Phone;
									replace_value_tmp.Owned_Work_Phone = row4.Owned_Work_Phone;
									replace_value_tmp.Day = row4.Day;
									replace_value_tmp.Month = row4.Month;
									replace_value_tmp.Year = row4.Year;
									replace_value_tmp.Date = row4.Date;
									replace_value = replace_value_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "replace_value"
								if (replace_value != null) {

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "replace_value"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										out = null;

// # Output table : 'out'
										out_tmp.CreditRecord_ID = replace_value.CreditRecord_ID.toString();
										out_tmp.Applicant_ID = replace_value.Applicant_ID;
										out_tmp.Time_ID = replace_value.Time_ID;
										out_tmp.Debt_TEST = replace_value.Status;
										out_tmp.GoodClient = replace_value.Status.replace("GoodDebt", "1")
												.replace("DadDebt", "0");
										out_tmp.BadClient = replace_value.Status.replace("DadDebt", "1")
												.replace("GoodDebt", "0");
										out_tmp.Last_ETL = TalendDate.getCurrentDate();
										out = out_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */

									/**
									 * [tMap_3 process_data_begin ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_begin ] stop
									 */
// Start of branch "out"
									if (out != null) {

										/**
										 * [tDBOutput_1 main ] start
										 */

										currentComponent = "tDBOutput_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "out"

											);
										}

										whetherReject_tDBOutput_1 = false;
										if (out.CreditRecord_ID == null) {
											pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(1, out.CreditRecord_ID);
										}

										if (out.Applicant_ID == null) {
											pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(2, out.Applicant_ID);
										}

										if (out.Time_ID == null) {
											pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_1.setLong(3, out.Time_ID);
										}

										if (out.Debt_TEST == null) {
											pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(4, out.Debt_TEST);
										}

										if (out.GoodClient == null) {
											pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(5, out.GoodClient);
										}

										if (out.BadClient == null) {
											pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(6, out.BadClient);
										}

										if (out.Last_ETL != null) {
											date_tDBOutput_1 = out.Last_ETL.getTime();
											if (date_tDBOutput_1 < year1_tDBOutput_1
													|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
												pstmt_tDBOutput_1.setString(7, "0000-00-00 00:00:00");
											} else {
												pstmt_tDBOutput_1.setTimestamp(7,
														new java.sql.Timestamp(date_tDBOutput_1));
											}
										} else {
											pstmt_tDBOutput_1.setNull(7, java.sql.Types.DATE);
										}

										pstmt_tDBOutput_1.addBatch();
										nb_line_tDBOutput_1++;

										batchSizeCounter_tDBOutput_1++;
										if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
															? 0
															: 1);
												}
												rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());
											}

											batchSizeCounter_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1++;

										if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
												}
												rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());

											}
											if (rowsToCommitCount_tDBOutput_1 != 0) {
											}
											conn_tDBOutput_1.commit();
											if (rowsToCommitCount_tDBOutput_1 != 0) {
												rowsToCommitCount_tDBOutput_1 = 0;
											}
											commitCounter_tDBOutput_1 = 0;

										}

										tos_count_tDBOutput_1++;

										/**
										 * [tDBOutput_1 main ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_end ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_end ] stop
										 */

									} // End of branch "out"

									/**
									 * [tMap_3 process_data_end ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_end ] stop
									 */

								} // End of branch "replace_value"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

						} // End of branch "filter_data"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "filter_data");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "replace_value");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Index_Applicant;

		public Integer getIndex_Applicant() {
			return this.Index_Applicant;
		}

		public String Applicant_ID;

		public String getApplicant_ID() {
			return this.Applicant_ID;
		}

		public String Applicant_Gender;

		public String getApplicant_Gender() {
			return this.Applicant_Gender;
		}

		public Integer Total_Children;

		public Integer getTotal_Children() {
			return this.Total_Children;
		}

		public Integer Total_Family_Members;

		public Integer getTotal_Family_Members() {
			return this.Total_Family_Members;
		}

		public Integer Applicant_Age;

		public Integer getApplicant_Age() {
			return this.Applicant_Age;
		}

		public java.util.Date Birth_Date;

		public java.util.Date getBirth_Date() {
			return this.Birth_Date;
		}

		public java.util.Date Employed_Date;

		public java.util.Date getEmployed_Date() {
			return this.Employed_Date;
		}

		public String Education_Type;

		public String getEducation_Type() {
			return this.Education_Type;
		}

		public String Family_Status;

		public String getFamily_Status() {
			return this.Family_Status;
		}

		public String Housing_Type;

		public String getHousing_Type() {
			return this.Housing_Type;
		}

		public String Income_Type;

		public String getIncome_Type() {
			return this.Income_Type;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Float Total_Income;

		public Float getTotal_Income() {
			return this.Total_Income;
		}

		public String Owned_Email;

		public String getOwned_Email() {
			return this.Owned_Email;
		}

		public String Owned_Mobile_Phone;

		public String getOwned_Mobile_Phone() {
			return this.Owned_Mobile_Phone;
		}

		public String Owned_Car;

		public String getOwned_Car() {
			return this.Owned_Car;
		}

		public String Owned_Realty;

		public String getOwned_Realty() {
			return this.Owned_Realty;
		}

		public String Owned_Phone;

		public String getOwned_Phone() {
			return this.Owned_Phone;
		}

		public String Owned_Work_Phone;

		public String getOwned_Work_Phone() {
			return this.Owned_Work_Phone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Applicant_ID == null) ? 0 : this.Applicant_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Applicant_ID == null) {
				if (other.Applicant_ID != null)
					return false;

			} else if (!this.Applicant_ID.equals(other.Applicant_ID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Index_Applicant = this.Index_Applicant;
			other.Applicant_ID = this.Applicant_ID;
			other.Applicant_Gender = this.Applicant_Gender;
			other.Total_Children = this.Total_Children;
			other.Total_Family_Members = this.Total_Family_Members;
			other.Applicant_Age = this.Applicant_Age;
			other.Birth_Date = this.Birth_Date;
			other.Employed_Date = this.Employed_Date;
			other.Education_Type = this.Education_Type;
			other.Family_Status = this.Family_Status;
			other.Housing_Type = this.Housing_Type;
			other.Income_Type = this.Income_Type;
			other.Job_Title = this.Job_Title;
			other.Total_Income = this.Total_Income;
			other.Owned_Email = this.Owned_Email;
			other.Owned_Mobile_Phone = this.Owned_Mobile_Phone;
			other.Owned_Car = this.Owned_Car;
			other.Owned_Realty = this.Owned_Realty;
			other.Owned_Phone = this.Owned_Phone;
			other.Owned_Work_Phone = this.Owned_Work_Phone;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Applicant_ID = this.Applicant_ID;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length) {
					if (length < 1024 && commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform.length == 0) {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[1024];
					} else {
						commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length);
				strReturn = new String(commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					this.Applicant_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Applicant_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Index_Applicant = readInteger(dis, ois);

				this.Applicant_Gender = readString(dis, ois);

				this.Total_Children = readInteger(dis, ois);

				this.Total_Family_Members = readInteger(dis, ois);

				this.Applicant_Age = readInteger(dis, ois);

				this.Birth_Date = readDate(dis, ois);

				this.Employed_Date = readDate(dis, ois);

				this.Education_Type = readString(dis, ois);

				this.Family_Status = readString(dis, ois);

				this.Housing_Type = readString(dis, ois);

				this.Income_Type = readString(dis, ois);

				this.Job_Title = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Total_Income = null;
				} else {
					this.Total_Income = dis.readFloat();
				}

				this.Owned_Email = readString(dis, ois);

				this.Owned_Mobile_Phone = readString(dis, ois);

				this.Owned_Car = readString(dis, ois);

				this.Owned_Realty = readString(dis, ois);

				this.Owned_Phone = readString(dis, ois);

				this.Owned_Work_Phone = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.Index_Applicant, dos, oos);

				writeString(this.Applicant_Gender, dos, oos);

				writeInteger(this.Total_Children, dos, oos);

				writeInteger(this.Total_Family_Members, dos, oos);

				writeInteger(this.Applicant_Age, dos, oos);

				writeDate(this.Birth_Date, dos, oos);

				writeDate(this.Employed_Date, dos, oos);

				writeString(this.Education_Type, dos, oos);

				writeString(this.Family_Status, dos, oos);

				writeString(this.Housing_Type, dos, oos);

				writeString(this.Income_Type, dos, oos);

				writeString(this.Job_Title, dos, oos);

				if (this.Total_Income == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Income);
				}

				writeString(this.Owned_Email, dos, oos);

				writeString(this.Owned_Mobile_Phone, dos, oos);

				writeString(this.Owned_Car, dos, oos);

				writeString(this.Owned_Realty, dos, oos);

				writeString(this.Owned_Phone, dos, oos);

				writeString(this.Owned_Work_Phone, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Index_Applicant=" + String.valueOf(Index_Applicant));
			sb.append(",Applicant_ID=" + Applicant_ID);
			sb.append(",Applicant_Gender=" + Applicant_Gender);
			sb.append(",Total_Children=" + String.valueOf(Total_Children));
			sb.append(",Total_Family_Members=" + String.valueOf(Total_Family_Members));
			sb.append(",Applicant_Age=" + String.valueOf(Applicant_Age));
			sb.append(",Birth_Date=" + String.valueOf(Birth_Date));
			sb.append(",Employed_Date=" + String.valueOf(Employed_Date));
			sb.append(",Education_Type=" + Education_Type);
			sb.append(",Family_Status=" + Family_Status);
			sb.append(",Housing_Type=" + Housing_Type);
			sb.append(",Income_Type=" + Income_Type);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Total_Income=" + String.valueOf(Total_Income));
			sb.append(",Owned_Email=" + Owned_Email);
			sb.append(",Owned_Mobile_Phone=" + Owned_Mobile_Phone);
			sb.append(",Owned_Car=" + Owned_Car);
			sb.append(",Owned_Realty=" + Owned_Realty);
			sb.append(",Owned_Phone=" + Owned_Phone);
			sb.append(",Owned_Work_Phone=" + Owned_Work_Phone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Applicant_ID, other.Applicant_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(filter_data)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:GOOZTBRlS4tfSACZ2KgGYiarhdN4cg8+YKASMA==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "credit_card_approval_dw"
						+ "?" + "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `application_dimension`.`Index_Applicant`, \n  `application_dimension`.`Applicant_ID`, \n  `application_dimensi"
						+ "on`.`Applicant_Gender`, \n  `application_dimension`.`Total_Children`, \n  `application_dimension`.`Total_Family_Members`, "
						+ "\n  `application_dimension`.`Applicant_Age`, \n  `application_dimension`.`Birth_Date`, \n  `application_dimension`.`Employe"
						+ "d_Date`, \n  `application_dimension`.`Education_Type`, \n  `application_dimension`.`Family_Status`, \n  `application_dimens"
						+ "ion`.`Housing_Type`, \n  `application_dimension`.`Income_Type`, \n  `application_dimension`.`Job_Title`, \n  `application_d"
						+ "imension`.`Total_Income`, \n  `application_dimension`.`Owned_Email`, \n  `application_dimension`.`Owned_Mobile_Phone`, \n  "
						+ "`application_dimension`.`Owned_Car`, \n  `application_dimension`.`Owned_Realty`, \n  `application_dimension`.`Owned_Phone`"
						+ ", \n  `application_dimension`.`Owned_Work_Phone`\nFROM `application_dimension`";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.Index_Applicant = null;
						} else {

							row2.Index_Applicant = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								row2.Index_Applicant = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Applicant_ID = null;
						} else {

							row2.Applicant_ID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.Applicant_Gender = null;
						} else {

							row2.Applicant_Gender = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.Total_Children = null;
						} else {

							row2.Total_Children = rs_tDBInput_2.getInt(4);
							if (rs_tDBInput_2.wasNull()) {
								row2.Total_Children = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.Total_Family_Members = null;
						} else {

							row2.Total_Family_Members = rs_tDBInput_2.getInt(5);
							if (rs_tDBInput_2.wasNull()) {
								row2.Total_Family_Members = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.Applicant_Age = null;
						} else {

							row2.Applicant_Age = rs_tDBInput_2.getInt(6);
							if (rs_tDBInput_2.wasNull()) {
								row2.Applicant_Age = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.Birth_Date = null;
						} else {

							if (rs_tDBInput_2.getString(7) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(7);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.Birth_Date = rs_tDBInput_2.getTimestamp(7);
								} else {
									row2.Birth_Date = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.Birth_Date = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.Employed_Date = null;
						} else {

							if (rs_tDBInput_2.getString(8) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(8);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.Employed_Date = rs_tDBInput_2.getTimestamp(8);
								} else {
									row2.Employed_Date = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.Employed_Date = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.Education_Type = null;
						} else {

							row2.Education_Type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.Family_Status = null;
						} else {

							row2.Family_Status = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.Housing_Type = null;
						} else {

							row2.Housing_Type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.Income_Type = null;
						} else {

							row2.Income_Type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.Job_Title = null;
						} else {

							row2.Job_Title = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.Total_Income = null;
						} else {

							row2.Total_Income = rs_tDBInput_2.getFloat(14);
							if (rs_tDBInput_2.wasNull()) {
								row2.Total_Income = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.Owned_Email = null;
						} else {

							row2.Owned_Email = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.Owned_Mobile_Phone = null;
						} else {

							row2.Owned_Mobile_Phone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.Owned_Car = null;
						} else {

							row2.Owned_Car = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.Owned_Realty = null;
						} else {

							row2.Owned_Realty = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.Owned_Phone = null;
						} else {

							row2.Owned_Phone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.Owned_Work_Phone = null;
						} else {

							row2.Owned_Work_Phone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.Index_Applicant = row2.Index_Applicant;

						row2_HashRow.Applicant_ID = row2.Applicant_ID;

						row2_HashRow.Applicant_Gender = row2.Applicant_Gender;

						row2_HashRow.Total_Children = row2.Total_Children;

						row2_HashRow.Total_Family_Members = row2.Total_Family_Members;

						row2_HashRow.Applicant_Age = row2.Applicant_Age;

						row2_HashRow.Birth_Date = row2.Birth_Date;

						row2_HashRow.Employed_Date = row2.Employed_Date;

						row2_HashRow.Education_Type = row2.Education_Type;

						row2_HashRow.Family_Status = row2.Family_Status;

						row2_HashRow.Housing_Type = row2.Housing_Type;

						row2_HashRow.Income_Type = row2.Income_Type;

						row2_HashRow.Job_Title = row2.Job_Title;

						row2_HashRow.Total_Income = row2.Total_Income;

						row2_HashRow.Owned_Email = row2.Owned_Email;

						row2_HashRow.Owned_Mobile_Phone = row2.Owned_Mobile_Phone;

						row2_HashRow.Owned_Car = row2.Owned_Car;

						row2_HashRow.Owned_Realty = row2.Owned_Realty;

						row2_HashRow.Owned_Phone = row2.Owned_Phone;

						row2_HashRow.Owned_Work_Phone = row2.Owned_Work_Phone;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		static byte[] commonByteArray_CREDIT_CARD_APPROVAL_credit_card_fact_transform = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long Time_ID;

		public Long getTime_ID() {
			return this.Time_ID;
		}

		public Integer Day;

		public Integer getDay() {
			return this.Day;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.Time_ID = this.Time_ID;
			other.Day = this.Day;
			other.Month = this.Month;
			other.Year = this.Year;
			other.Date = this.Date;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.Date = this.Date;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CREDIT_CARD_APPROVAL_credit_card_fact_transform) {

				try {

					int length = 0;

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.Time_ID = null;
				} else {
					this.Time_ID = dis.readLong();
				}

				this.Day = readInteger(dis, ois);

				this.Month = readInteger(dis, ois);

				this.Year = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.Time_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Time_ID);
				}

				writeInteger(this.Day, dos, oos);

				writeInteger(this.Month, dos, oos);

				writeInteger(this.Year, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Time_ID=" + String.valueOf(Time_ID));
			sb.append(",Day=" + String.valueOf(Day));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(filter_data)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:3nFPDTrTfB6Wq4pkZNbTyCTLKI/NeCGQQ3pLbw==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "credit_card_approval_dw"
						+ "?" + "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  `time_dimension`.`Time_ID`, \n  `time_dimension`.`Day`, \n  `time_dimension`.`Month`, \n  `time_dimension`.`Year"
						+ "`, \n  `time_dimension`.`Date`\nFROM `time_dimension`";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.Time_ID = null;
						} else {

							row3.Time_ID = rs_tDBInput_3.getLong(1);
							if (rs_tDBInput_3.wasNull()) {
								row3.Time_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.Day = null;
						} else {

							row3.Day = rs_tDBInput_3.getInt(2);
							if (rs_tDBInput_3.wasNull()) {
								row3.Day = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.Month = null;
						} else {

							row3.Month = rs_tDBInput_3.getInt(3);
							if (rs_tDBInput_3.wasNull()) {
								row3.Month = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.Year = null;
						} else {

							row3.Year = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								row3.Year = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.Date = null;
						} else {

							if (rs_tDBInput_3.getString(5) != null) {
								String dateString_tDBInput_3 = rs_tDBInput_3.getString(5);
								if (!("0000-00-00").equals(dateString_tDBInput_3)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
									row3.Date = rs_tDBInput_3.getTimestamp(5);
								} else {
									row3.Date = (java.util.Date) year0_tDBInput_3.clone();
								}
							} else {
								row3.Date = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.Time_ID = row3.Time_ID;

						row3_HashRow.Day = row3.Day;

						row3_HashRow.Month = row3.Month;

						row3_HashRow.Year = row3.Year;

						row3_HashRow.Date = row3.Date;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final credit_card_fact_transform credit_card_fact_transformClass = new credit_card_fact_transform();

		int exitCode = credit_card_fact_transformClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = credit_card_fact_transform.class.getClassLoader().getResourceAsStream(
					"credit_card_approval/credit_card_fact_transform_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = credit_card_fact_transform.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : credit_card_fact_transform");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 172333 characters generated by Talend Open Studio for Data Integration on the
 * 19 December 2022 at 16:13:13 CET
 ************************************************************************************************/